palmerpenguins
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
quit
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
reticulate::repl_python()
quit
reticulate::repl_python()
from palmerpenguins import penguins
from palmerpenguins import penguins
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
pip install jupyter
.\pip install jupyter
pip freeze > requirements.txt
quit
system("pip install jupyter")
system("pip freeze > requirements.txt")
system(".\pip freeze > requirements.txt")
system("pip freeze > requirements.txt")
py_config()
system("cd")
reticulate
reticulate::py pip freeze > requirements.txt
reticulate::py
pip freeze > requirements.txt
reticulate::repl_python()
pip freeze > requirements.txt
quit
library(shiny); runApp('app-api.R')
runApp('app-api.R')
runApp('app-api.R')
runApp('app-api.R')
sidebarLayout(
sidebarPanel(
sliderInput(
"bill_length",
"Bill Length (mm)",
min = 30,
max = 60,
value = 45,
step = 0.1
),
selectInput(
"sex",
"Sex",
c("Male", "Female")
),
selectInput(
"species",
"Species",
c("Adelie", "Chinstrap", "Gentoo")
),
# Get model predictions
actionButton(
"predict",
"Predict"
)
),
mainPanel(
h2("Penguin Parameters"),
verbatimTextOutput("vals"),
h2("Predicted Penguin Mass (g)"),
textOutput("pred")
)
)
)
sidebarLayout(
sidebarPanel(
sliderInput(
"bill_length",
"Bill Length (mm)",
min = 30,
max = 60,
value = 45,
step = 0.1
),
selectInput(
"sex",
"Sex",
c("Male", "Female")
),
selectInput(
"species",
"Species",
c("Adelie", "Chinstrap", "Gentoo")
),
# Get model predictions
actionButton(
"predict",
"Predict"
)
),
mainPanel(
h2("Penguin Parameters"),
verbatimTextOutput("vals"),
h2("Predicted Penguin Mass (g)"),
textOutput("pred")
)
)
vals <- reactive(
list(
bill_length_mm = 50,
species_Chinstrap = T,
species_Gentoo = input$species == F,
sex_male = input$sex == F
)
)
vals
httr2::request(api_url) |>
httr2::req_body_json(vals())
api_url <- "http://127.0.0.1:8080/predict"
httr2::request(api_url) |>
httr2::req_body_json(vals())
pred <- eventReactive(
input$predict,
httr2::request(api_url) |>
httr2::req_body_json(vals()) |>
httr2::req_perform() |>
httr2::resp_body_json(),
ignoreInit = TRUE
)
pred
pred()$predict[[1]]
pred <- eventReactive(
input$predict,
httr2::request(api_url) |>
httr2::req_body_json([
runApp('app-api.R')
runApp('app-api.R')
runApp('app-api.R')
?httr2::request
httr2::request("http://127.0.0.1:8080/predict")
request = httr2::request("http://127.0.0.1:8080/predict")
?httr2::req_body_json()
request |> httr2::req_body_json(vals())
request |> httr2::req_body_json([
?httr2::req_perform()
?httr2::req_body_json()
?req_body_json_modify()
?req_body_json_modify()
list(
bill_length_mm = 40,
species_Chinstrap = T,
species_Gentoo = F,
sex_male = F
)
[
[
[ {
[{"bill_length_mm": 40,
[{"bill_length_mm": 40,"species_Chinstrap": false,"species_Gentoo": false,"sex_male": true}]
{"bill_length_mm": 40,"species_Chinstrap": false,"species_Gentoo": false,"sex_male": true}
reticulate::source_python('~/DevOps/app-api.py')
reticulate::py_last_error()
reticulate::source_python('~/DevOps/app-api.py')
reticulate::source_python('~/DevOps/app-api.py')
library(reticulate)
venv_path <- normalizePath(".venv", mustWork = TRUE)
Sys.setenv(RETICULATE_PYTHON = paste0(venv_path, "/Scripts/python.exe"))
reticulate::use_virtualenv(venv_path, required = TRUE)
library(reticulate)
venv_path <- normalizePath(".venv", mustWork = TRUE)
Sys.setenv(RETICULATE_PYTHON = paste0(venv_path, "/Scripts/python.exe"))
reticulate::use_virtualenv(venv_path, required = TRUE)
reticulate::source_python('~/DevOps/app-api.py')
reticulate::repl_python()
from shiny import App, render, ui, reactive
import requests
api_url = 'http://127.0.0.1:8080/predict'
app_ui = ui.page_fluid(
ui.panel_title("Penguin Mass Predictor"),
ui.layout_sidebar(
ui.panel_sidebar(
[ui.input_slider("bill_length", "Bill Length (mm)", 30, 60, 45, step = 0.1),
ui.input_select("sex", "Sex", ["Male", "Female"]),
ui.input_select("species", "Species", ["Adelie", "Chinstrap", "Gentoo"]),
ui.input_action_button("predict", "Predict")]
),
ui.panel_main(
ui.h2("Penguin Parameters"),
ui.output_text_verbatim("vals_out"),
ui.h2("Predicted Penguin Mass (g)"),
ui.output_text("pred_out")
)
)
)
def server(input, output, session):
@reactive.Calc
def vals():
d = {
"bill_length_mm" : input.bill_length(),
"sex_Male" : input.sex() == "Male",
"species_Gentoo" : input.species() == "Gentoo",
"species_Chinstrap" : input.species() == "Chinstrap"
}
return d
@reactive.Calc
@reactive.event(input.predict)
def pred():
r = requests.post(api_url, json = vals())
return r.json().get('predict')[0]
@output
@render.text
def vals_out():
return f"{vals()}"
@output
@render.text
def pred_out():
return f"{round(pred())}"
app = App(app_ui, server)
py_run_file("/app-api.py")
exit
py_run_file("/app-api.py")
py_run_file("C:\Users\Connor Emmons\Documents\DevOps\app-api.py")
py_run_file("\app-api.py")
py_run_file("C:\Users\Connor Emmons\Documents\DevOps\app-api.py")
library(reticulate)
venv_path <- normalizePath(".venv", mustWork = TRUE)
Sys.setenv(RETICULATE_PYTHON = paste0(venv_path, "/Scripts/python.exe"))
reticulate::use_virtualenv(venv_path, required = TRUE)
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
import duckdb
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from pins import board_folder
from vetiver import vetiver_pin_write
model_board = board_folder("/data/model", allow_pickle_read = True)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
app.run(port = 8080)
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
renv::activate()
library(reticulate)
venv_path <- normalizePath(".venv", mustWork = TRUE)
Sys.setenv(RETICULATE_PYTHON = paste0(venv_path, "/Scripts/python.exe"))
reticulate::use_virtualenv(venv_path, required = TRUE)
library(palmerpenguins)
library(dplyr)
library(dbplyr)
library(ggplot2)
library(DBI)
library(duckdb)
library(httr2)
library(shiny)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
df <- dplyr::tbl(con, "penguins")
library(palmerpenguins)
library(dplyr)
library(dbplyr)
library(ggplot2)
library(DBI)
library(duckdb)
library(httr2)
library(shiny)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
df <- dplyr::tbl(con, "penguins")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
DBI::dbDisconnect(con)
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
library(palmerpenguins)
library(dplyr)
library(dbplyr)
library(ggplot2)
library(DBI)
library(duckdb)
library(httr2)
library(shiny)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
df <- dplyr::tbl(con, "penguins")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
DBI::dbDisconnect(con)
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
library(palmerpenguins)
library(dplyr)
library(dbplyr)
library(ggplot2)
library(DBI)
library(duckdb)
library(httr2)
library(shiny)
con <- DBI::dbConnect(duckdb::duckdb(), dbdir = "my-db.duckdb")
df <- dplyr::tbl(con, "penguins")
df %>%
group_by(species, sex) %>%
summarise(
across(
ends_with("mm") | ends_with("g"),
\(x) mean(x, na.rm = TRUE)
)
) %>%
dplyr::collect() %>%
knitr::kable()
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
DBI::dbDisconnect(con)
DBI::dbDisconnect(con)
df %>%
ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth(method = "lm")
renv::activate()
library(reticulate)
venv_path <- normalizePath(".venv", mustWork = TRUE)
Sys.setenv(RETICULATE_PYTHON = paste0(venv_path, "/Scripts/python.exe"))
reticulate::use_virtualenv(venv_path, required = TRUE)
renv::activate()
library(reticulate)
venv_path <- normalizePath(".venv", mustWork = TRUE)
Sys.setenv(RETICULATE_PYTHON = paste0(venv_path, "/Scripts/python.exe"))
reticulate::use_virtualenv(venv_path, required = TRUE)
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
exit
library(reticulate)
venv_path <- normalizePath(".venv", mustWork = TRUE)
Sys.setenv(RETICULATE_PYTHON = paste0(venv_path, "/Scripts/python.exe"))
reticulate::use_virtualenv(venv_path, required = TRUE)
renv::activate()
library(reticulate)
venv_path <- normalizePath(".venv", mustWork = TRUE)
Sys.setenv(RETICULATE_PYTHON = paste0(venv_path, "/Scripts/python.exe"))
reticulate::use_virtualenv(venv_path, required = TRUE)
library(reticulate)
venv_path <- normalizePath(".venv", mustWork = TRUE)
Sys.setenv(RETICULATE_PYTHON = paste0(venv_path, "/Scripts/python.exe"))
reticulate::use_virtualenv(venv_path, required = TRUE)
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
import duckdb
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from pins import board_folder
from vetiver import vetiver_pin_write
model_board = board_folder("/data/model", allow_pickle_read = True)
vetiver_pin_write(model_board, v)
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from pins import board_folder
from vetiver import vetiver_pin_write
model_board = board_folder("/data/model", allow_pickle_read = True)
vetiver_pin_write(model_board, v)
from vetiver import VetiverAPI
app = VetiverAPI(v, check_prototype = True)
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
sys.stdout = open(os.devnull, 'w')
from pins import board_folder
from vetiver import vetiver_pin_write
model_board = board_folder("/data/model", allow_pickle_read = True)
vetiver_pin_write(model_board, v)
sys.stdout = sys.__stdout__
exit
renv::activate()
library(reticulate)
venv_path <- normalizePath(".venv", mustWork = TRUE)
Sys.setenv(RETICULATE_PYTHON = paste0(venv_path, "/Scripts/python.exe"))
reticulate::use_virtualenv(venv_path, required = TRUE)
reticulate::repl_python()
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
import duckdb
con = duckdb.connect('my-db.duckdb')
df = con.execute("SELECT * FROM penguins").fetchdf().dropna()
con.close()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
from vetiver import VetiverModel
v = VetiverModel(model, model_name='penguin_model', prototype_data=X)
from pins import board_folder
from vetiver import vetiver_pin_write
model_board = board_folder("/data/model", allow_pickle_read = True)
vetiver_pin_write(model_board, v)
exit
renv::activate()
library(reticulate)
venv_path <- normalizePath(".venv", mustWork = TRUE)
Sys.setenv(RETICULATE_PYTHON = paste0(venv_path, "/Scripts/python.exe"))
reticulate::use_virtualenv(venv_path, required = TRUE)
renv::activate()
library(reticulate)
venv_path <- normalizePath(".venv", mustWork = TRUE)
Sys.setenv(RETICULATE_PYTHON = paste0(venv_path, "/Scripts/python.exe"))
reticulate::use_virtualenv(venv_path, required = TRUE)
renv::activate()
renv::snapshot()
library(reticulate)
venv_path <- normalizePath(".venv", mustWork = TRUE)
Sys.setenv(RETICULATE_PYTHON = paste0(venv_path, "/Scripts/python.exe"))
reticulate::use_virtualenv(venv_path, required = TRUE)
