renv::init()
renv::snapshot()
renv::snapshot()
python
py
install.packages("reticulate")
renv::snapshot()
library(reticulate)
renv::snapshot()
py
py -m venv .venv
{venv}
venv
py venv
python -m venv .venv
source .venv /bin/activate
1 + 1
reticulate::repl_python()
py -m venv .venv
python -m venv .venv
venv .venv
py venv .venv
py -m venv .venv
py -m venv .venv
quit
()
system("py -m venv .venv")
use_virtualenv(".venv")
library(reticulate)
use_virtualenv(".venv")
system("py -m venv .venv")
library(reticulate)
use_virtualenv(".venv")
use_virtualenv(".venv", required = TRUE)
source .venv /bin/activate
system("source .venv /bin/activate")
py_config()
venv_path <- normalizePath(".venv", winslash = "/")
use_python(paste0(venv_path, "/bin/python"), required = TRUE)
.venv\Scripts\activate
use_virtualenv(venv_path, required = TRUE)
venv_path <- normalizePath(".venv", winslash = "/")
use_virtualenv(venv_path, required = TRUE)
system("use_virtualenv(venv_path, required = TRUE)")
py_config()
library(reticulate)
venv_path <- normalizePath(".venv", winslash = "/")
use_virtualenv(venv_path, required = TRUE)
py_config()
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
pip install palmerpenguins
quit
py_config()
palmerpenguins
palmerpenguins::path_to_file()
palmerpenguins
install.packages("palmerpenguins")
library(palmerpenguins)
library(dplyr)
library(ggplot2)
df <- palmerpenguins::penguins
renv::snapshot()
install(pandas)
install.packages(pandas)
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
pip install palmerpenguins
quit
pip install palmerpenguins
pip install palmerpenguins::penguins
palmerpenguins::penguins
reticulate::repl_python()
df = penguins.load_penguins().dropna()
df.head(3)
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
quit
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
quit
py_install(c("palmerpenguins", "pandas", "numpy", "scikit-learn"), envname = "C:/Users/Connor Emmons/Documents/DevOps/.venv")
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
quit
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
palmerpenguins
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
quit
reticulate::repl_python()
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
reticulate::repl_python()
quit
reticulate::repl_python()
from palmerpenguins import penguins
from palmerpenguins import penguins
from palmerpenguins import penguins
from pandas import get_dummies
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn import preprocessing
df = penguins.load_penguins().dropna()
df.head(3)
X = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)
y = df['body_mass_g']
model = LinearRegression().fit(X, y)
print(f"R^2 {model.score(X,y)}")
print(f"Intercept {model.intercept_}")
print(f"Columns {X.columns}")
print(f"Coefficients {model.coef_}")
pip install jupyter
.\pip install jupyter
pip freeze > requirements.txt
quit
system("pip install jupyter")
system("pip freeze > requirements.txt")
system(".\pip freeze > requirements.txt")
system("pip freeze > requirements.txt")
py_config()
system("cd")
reticulate
reticulate::py pip freeze > requirements.txt
reticulate::py
pip freeze > requirements.txt
reticulate::repl_python()
pip freeze > requirements.txt
quit
library(shiny); runApp('app-api.R')
runApp('app-api.R')
runApp('app-api.R')
runApp('app-api.R')
sidebarLayout(
sidebarPanel(
sliderInput(
"bill_length",
"Bill Length (mm)",
min = 30,
max = 60,
value = 45,
step = 0.1
),
selectInput(
"sex",
"Sex",
c("Male", "Female")
),
selectInput(
"species",
"Species",
c("Adelie", "Chinstrap", "Gentoo")
),
# Get model predictions
actionButton(
"predict",
"Predict"
)
),
mainPanel(
h2("Penguin Parameters"),
verbatimTextOutput("vals"),
h2("Predicted Penguin Mass (g)"),
textOutput("pred")
)
)
)
sidebarLayout(
sidebarPanel(
sliderInput(
"bill_length",
"Bill Length (mm)",
min = 30,
max = 60,
value = 45,
step = 0.1
),
selectInput(
"sex",
"Sex",
c("Male", "Female")
),
selectInput(
"species",
"Species",
c("Adelie", "Chinstrap", "Gentoo")
),
# Get model predictions
actionButton(
"predict",
"Predict"
)
),
mainPanel(
h2("Penguin Parameters"),
verbatimTextOutput("vals"),
h2("Predicted Penguin Mass (g)"),
textOutput("pred")
)
)
vals <- reactive(
list(
bill_length_mm = 50,
species_Chinstrap = T,
species_Gentoo = input$species == F,
sex_male = input$sex == F
)
)
vals
httr2::request(api_url) |>
httr2::req_body_json(vals())
api_url <- "http://127.0.0.1:8080/predict"
httr2::request(api_url) |>
httr2::req_body_json(vals())
pred <- eventReactive(
input$predict,
httr2::request(api_url) |>
httr2::req_body_json(vals()) |>
httr2::req_perform() |>
httr2::resp_body_json(),
ignoreInit = TRUE
)
pred
pred()$predict[[1]]
pred <- eventReactive(
input$predict,
httr2::request(api_url) |>
httr2::req_body_json([
runApp('app-api.R')
runApp('app-api.R')
runApp('app-api.R')
?httr2::request
httr2::request("http://127.0.0.1:8080/predict")
request = httr2::request("http://127.0.0.1:8080/predict")
?httr2::req_body_json()
request |> httr2::req_body_json(vals())
request |> httr2::req_body_json([
?httr2::req_perform()
?httr2::req_body_json()
?req_body_json_modify()
?req_body_json_modify()
list(
bill_length_mm = 40,
species_Chinstrap = T,
species_Gentoo = F,
sex_male = F
)
[
[
[ {
[{"bill_length_mm": 40,
[{"bill_length_mm": 40,"species_Chinstrap": false,"species_Gentoo": false,"sex_male": true}]
{"bill_length_mm": 40,"species_Chinstrap": false,"species_Gentoo": false,"sex_male": true}
reticulate::source_python('~/DevOps/app-api.py')
reticulate::py_last_error()
reticulate::source_python('~/DevOps/app-api.py')
reticulate::source_python('~/DevOps/app-api.py')
library(reticulate)
venv_path <- normalizePath(".venv", mustWork = TRUE)
Sys.setenv(RETICULATE_PYTHON = paste0(venv_path, "/Scripts/python.exe"))
reticulate::use_virtualenv(venv_path, required = TRUE)
library(reticulate)
venv_path <- normalizePath(".venv", mustWork = TRUE)
Sys.setenv(RETICULATE_PYTHON = paste0(venv_path, "/Scripts/python.exe"))
reticulate::use_virtualenv(venv_path, required = TRUE)
reticulate::source_python('~/DevOps/app-api.py')
reticulate::repl_python()
from shiny import App, render, ui, reactive
import requests
api_url = 'http://127.0.0.1:8080/predict'
app_ui = ui.page_fluid(
ui.panel_title("Penguin Mass Predictor"),
ui.layout_sidebar(
ui.panel_sidebar(
[ui.input_slider("bill_length", "Bill Length (mm)", 30, 60, 45, step = 0.1),
ui.input_select("sex", "Sex", ["Male", "Female"]),
ui.input_select("species", "Species", ["Adelie", "Chinstrap", "Gentoo"]),
ui.input_action_button("predict", "Predict")]
),
ui.panel_main(
ui.h2("Penguin Parameters"),
ui.output_text_verbatim("vals_out"),
ui.h2("Predicted Penguin Mass (g)"),
ui.output_text("pred_out")
)
)
)
def server(input, output, session):
@reactive.Calc
def vals():
d = {
"bill_length_mm" : input.bill_length(),
"sex_Male" : input.sex() == "Male",
"species_Gentoo" : input.species() == "Gentoo",
"species_Chinstrap" : input.species() == "Chinstrap"
}
return d
@reactive.Calc
@reactive.event(input.predict)
def pred():
r = requests.post(api_url, json = vals())
return r.json().get('predict')[0]
@output
@render.text
def vals_out():
return f"{vals()}"
@output
@render.text
def pred_out():
return f"{round(pred())}"
app = App(app_ui, server)
py_run_file("/app-api.py")
exit
py_run_file("/app-api.py")
py_run_file("C:\Users\Connor Emmons\Documents\DevOps\app-api.py")
py_run_file("\app-api.py")
py_run_file("C:\Users\Connor Emmons\Documents\DevOps\app-api.py")
